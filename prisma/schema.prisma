generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String
  isVerified    Boolean   @default(false)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Hall {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  isAvailable            Boolean
  isAvailableForStudents Boolean
  floors                 Floor[]
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Floor {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  isAvailable            Boolean
  isAvailableForStudents Boolean
  rooms                  Room[]
  hallId                 String   @db.ObjectId
  hall                   Hall     @relation(fields: [hallId], references: [id], onDelete: Cascade)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Room {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  isAvailable            Boolean
  isAvailableForStudents Boolean
  bed                    Bed[]
  floorId                String   @db.ObjectId
  floor                  Floor    @relation(fields: [floorId], references: [id], onDelete: Cascade)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Bed {
  id                     String      @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  isAvailable            Boolean
  isAvailableForStudents Boolean
  price                  Float
  roomId                 String      @db.ObjectId
  room                   Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  bedAssign              BedAssign[]
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
}

model Price {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  currentPrice Float
  isAvailable  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model StudentRegistration {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  role                 String      @default("student")
  registrationNumber   String      @unique
  referenceNumber      String      @unique
  referredBy           String
  department           String
  semester             String
  city                 String
  title                String
  fullName             String
  guardianName         String
  cnic                 String      @unique
  nationality          String
  address              String
  mobileNumber         String
  landlineNumber       String?
  emergencyContactName String
  emergencyContact     String
  bed                  BedAssign[]
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model GuestRegistration {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  role                 String      @default("guest")
  referenceNumber      String      @unique
  referredBy           String
  department           String
  city                 String
  organization         String
  title                String
  fullName             String
  guardianName         String
  cnic                 String      @unique
  nationality          String
  address              String
  mobileNumber         String
  landlineNumber       String?
  accompaniedBy        String
  emergencyContactName String
  emergencyContact     String
  bed                  BedAssign[]
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model BedAssign {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  startDate    String
  endDate      String
  totalPayment Float
  challans     Challan[]
  isClosed     Boolean              @default(false)
  studentId    String?              @db.ObjectId
  student      StudentRegistration? @relation(fields: [studentId], references: [id])
  guestId      String?              @db.ObjectId
  guest        GuestRegistration?   @relation(fields: [guestId], references: [id])
  bedId        String               @db.ObjectId
  bed          Bed                  @relation(fields: [bedId], references: [id])
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model Challan {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  challanNumber String    @unique
  amount        Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  BedAssign     BedAssign @relation(fields: [bedAssignId], references: [id])
  bedAssignId   String    @db.ObjectId
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
